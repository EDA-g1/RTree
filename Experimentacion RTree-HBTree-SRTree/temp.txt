/*#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <vector>
#include <iostream>
#include <ctime>
//#include "rtree.h"
using namespace std;

#include "star_rtree.h"

void insert_s_rtree(){
 StarRTree* rt=new StarRTree();
  int x=0;
  int y=0;
  int n=0;
  for(int a=0;a<2;a++){
  
    for(int i=0;i<5;i++){
      vector<Polygon>polygons;
      vector<Point> point;
  
      for(int j=0;j<10;j++){
        n=4+rand()%(10-4);
        for(int k=3;k<n;k++){
          x=rand()%(2048); //2048
          y=rand()%(2048); //2048
          point.push_back(Point(x,y));
        }  
        rt->insert_spatialobj(new Polygon(point),Status::polygon);
      } 
      
      point.clear();
      polygons.clear();
    }
    
  }
  rt->show_rtree();
  delete rt;
}

void search_s_rtree(){
  int x=0;
  int y=0;
  int n=0;

  StarRTree* rt=new StarRTree();
  for(int i=0; i<5;i++){
    vector<Polygon*>polygons;
    vector<Point> point;
    for(int j=0;j< 10; j++){
      n=4+rand()%(10-4);
      for(int k=3;k<n;k++){
           x=rand()%2048;
           y=rand()%2048;
           point.push_back(Point(x,y));
        }
      polygons.push_back(new Polygon(point));
      rt->insert_spatialobj(new Polygon(point),Status::polygon);
    }
    for(int a=0;a<polygons.size();a++){
      
      rt->knn(polygons[a],1);
        
    }
    polygons.clear();
    point.clear();
  }
    rt->show_rtree();
    delete rt;
  
}

void remove_s_rtree(){
  int x=0;
  int y=0;
  int n=0;
  int rnd=0;

  StarRTree* rt=new StarRTree();
  vector<Polygon*>Ptotal;

  for(int j=0;j< 4; j++){
    vector<Polygon*>polygons;
    vector<Point> point;
      n=4+rand()%(10-4);
      for(int k=3;k<n;k++){
           x=rand()%2048;
           y=rand()%2048;
           point.push_back(Point(x,y));
        }
      
      polygons.push_back(new Polygon(point));
      Ptotal.push_back(new Polygon(point));
      rt->insert_spatialobj(new Polygon(point),Status::polygon);
      polygons.clear();
      point.clear();
    }
    rt->show_rtree();
    cout<<"-------------"<<endl;
    for(int a=0;a<2;a++){
      int temp=2;
      for(int b=0;b<2;b++){
        rnd=rand()%temp;
        vector<Point>p = Ptotal[rnd]->points;
        for(int c=0;c<p.size();c++){
          rt->remove_spatialobj(&p[c],Ptotal[rnd]);
        }
        Ptotal.erase(Ptotal.begin()+rnd);
        temp=temp-1;
      }
    }
    rt->show_rtree();

    cout<<"-------------"<<endl;
    Ptotal.clear();
    delete rt;
    //point.clear();
    //polygons.clear();
    
  
}

void knn_s_rtree(int k){
  StarRTree* rt=new StarRTree();
  int x=0;
  int y=0;
  int n=0;
  int px=0;
  int py=0;
  for(int a=0;a<2;a++){
  
    for(int i=0;i<5;i++){
      vector<Polygon>polygons;
      vector<Point> point;
  
      for(int j=0;j<10;j++){
        n=4+rand()%(10-4);
        for(int k=3;k<n;k++){
          x=rand()%(2048); //2048
          y=rand()%(2048); //2048
          point.push_back(Point(x,y));
        }  
        rt->insert_spatialobj(new Polygon(point),Status::polygon);
      }
      px=rand()%2048;
      py=rand()%2048;
      Point* pnt = new Point(px,py);
      rt->knn(pnt,k);
    
      point.clear();
      polygons.clear();
      delete pnt;
    }
    
  }
  //rt->show_rtree();
  delete rt;
}

int main(){
  
  int k=5;
  srand(time(NULL));
  

  //insert_s_rtree();
  //search_s_rtree();
  //remove_s_rtree();
  knn_s_rtree(k);

  
  return 0;
}*/